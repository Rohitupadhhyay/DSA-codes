#include <bits/stdc++.h>
using namespace std;

class Graph{
    public:
    unordered_map<int,list<pair<int,int>>> adj;
    
    void addEdge(int u,int v,int wt, bool direction){
        //direction-0-undirected;
        //direction-1-directed;
        if(direction == 1){
            adj[u].push_back({v,wt});
        }
        else{
            adj[u].push_back({v,wt});
            adj[v].push_back({u,wt});
        }
    }
     void printGraph(){
         for(auto i: adj){
             cout<<i.first<<" : ";
             for(auto j: i.second){
                 cout<<"{"<<j.first<<","<<j.second<<"}, ";
             }
             cout<<endl;
         }
     }   
     
     void topoSort(int src, unordered_map<int,bool> &visited, stack<int> &toposort){
         
         for(auto i: adj[src]){
            int topoNode=i.first;
            int topoWt=i.second;
             
             if(!visited[topoNode]){
                 visited[topoNode]= true;
                 topoSort(topoNode,visited,toposort);
             }
         }
         
        toposort.push(src);
         
         
         
     }
     
     
     void shortestDistance(stack<int> &toposort,  vector<int> &distance){
         int src=toposort.top();
         toposort.pop();
         distance[src]=0;
         
         for(auto nbr:adj[src]){
             int nbrNode=nbr.first;
             int nbrwt=nbr.second;
             
             if(distance[src]+nbrwt < distance[nbrNode]){
                 distance[nbrNode]=distance[src]+nbrwt;
             }
             
             while(!toposort.empty()){
                 src=toposort.top();
                 toposort.pop();
                  for(auto nbr:adj[src]){
             int nbrNode=nbr.first;
             int nbrwt=nbr.second;
             
             if(distance[src]+nbrwt < distance[nbrNode]){
                 distance[nbrNode]=distance[src]+nbrwt;
             }
             }
         }
     }
     }  
};


int main() {
    Graph g;
     g.addEdge(0,1,2,1);
    g.addEdge(1,2,2,1);
    g.addEdge(1,3,5,1);
    g.addEdge(2,4,7,1);
    g.addEdge(3,4,9,1);
    g.addEdge(4,5,6,1);
    g.addEdge(5,6,3,1);
  
    int n=7;
    int src=0;
    unordered_map<int,bool> visited;
    stack<int> toposort;
    
    for(int i=0;i<7;i++){
        if(!visited[i])
    g.topoSort(i,visited,toposort);
    }
    
    vector<int> distance(n,INT_MAX);
    g.shortestDistance(toposort,distance);
    for(int i=0;i<n;i++){
        cout<<distance[i]<<endl;
    }
    return 0;
}